 #extract 'review_text' and 'rating' into a text data frame
 universal_df_text = universal_df[['review_text', 'rating']] 
 corpus2= universal_df_text['review_text']
 y= universal_df_text['rating']
 
 #view shape of data
 print(corpus2.shape, y.shape)
 
 #Vectorize corpus2
 from sklearn.feature_extraction.text import TfidfVectorizer 
 vectorizer = TfidfVectorizer()
 vectorizer
 X_matrix = vectorizer.fit_transform(corpus2) 
 X_matrix.shape
 
 #View review_text as a matrix
 import scipy.sparse
 X =pd.DataFrame.sparse.from_spmatrix(X_matrix, columns = vectorizer.get_feature_names())
 X
 
 #breaking the data set into train/test split
 X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42) 
 
 from sklearn.feature_selection import SelectKBest 
 from sklearn.feature_selection import chi2
 # to get my top 10 features
 select_k = SelectKBest(chi2, k=10) 
 select_X = select_k.fit_transform(X_train, y_train)
 select_X.shape 
 
 from sklearn.feature_extraction.text import CountVectorizer
 X_train.columns[select_k.get_support()] 
 
 #
 from sklearn.neighbors import KNeighborsClassifier
 from sklearn.linear_model import Perceptron

 acc=[]
 k_vals = [10, 25, 50, 100, 250, 500, 1000, 10000]
 
 for k in k_vals:
 sel = SelectKBest(chi2, k=k)
 X_train_new2 = sel.fit_transform(X_train, y_train) 
 X_test_new2 = sel.transform(X_test)
 clf2 = Perceptron(eta0 = 0.1, random_state = 42) 
 clf2.fit(X_train_new2, y_train) 
 acc.append(clf2.score(X_test_new2, y_test))
 
plt.plot(k_vals, acc, '-o') 
plt.xscale('log') 
plt.xlabel('Number of Features') 
plt.ylabel('Accuracy') 
 
 
 
 
 
 
